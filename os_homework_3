//Your code here:
if(n==0)
{
	result=nextfree;
	return result;
}else
{
	result=nextfree;
	nextfree=nextfree+n;
	nextfree=ROUNDUP((char*)nextfree,PGSIZE);
	return result;
}
return NULL;
part2:
//Your code goes here:
pages = (struct Page *) boot_alloc(sizeof(sturct Page) * npages;
part3:
//Your code goes here:
size_t i;
page_free_list=NULL;
int lower_page=PGNUM(IOPHYSMEM);
int high_page=PGUNM(PADDR(boot_alloc(0)));
for(i=0;i<npages;i++){
	pages[i].pp_ref=0;
	if(i == 0)continue;
	if(i >=lower_page && i < high_page)continue;
	pages[i].pp_link = page_free_list;
	page_free_list = &pages[i];
}
part4:apply
struct Page*
page_alloc(int alloc_flags)
{
	//Fill this function in 
	struct Page *result=page_free_list;
	if(result!=NULL)
	{
		page_free_list=result->pp_link;
		reult->pp_link=NULL;

		if(alloc_flages & ALLOC_ ZERO)
			memset(page2kva(result),'\0',PGSIZE);
	}
	return result;
}
part5:
page_free(struct Page *pp)
{
	//Fill this function in
	assert(pp->pp_ref==0);
	pages_link=page_free_list;
	page_free_list=pp;
}
